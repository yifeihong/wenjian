回溯法，一般可以解决如下几种问题：
•	组合问题：N个数里面按一定规则找出k个数的集合
•	排列问题：N个数按一定规则全排列，有几种排列方式
{1, 2} 和 {2, 1} 在组合上，就是一个集合，因为不强调顺序，而要是排列的话，{1, 2} 和 {2, 1} 就是两个集合了

LeetCode 77
给定两个整数 n 和 k，返回 1 ... n 中所有可能的 k 个数的组合。
示例: 输入: n = 4, k = 2 输出: [ [2,4], [3,4], [2,3], [1,2], [1,3], [1,4], ]
图中可以发现n相当于树的宽度，k相当于树的深度。
图中每次搜索到了叶子节点，我们就找到了一个结果。
递归
循环
原有集合: 元素不重复，有序
目标集合: 元素不重复, k 个数的组合
class Solution {
public:
    vector<vector<int>> ret;
    vector<int> path;
    void traceBack(int n, int k, int start) {
        if (path.size() == k) {
            ret.emplace_back(path);
            return;
        }
        for (int i = start; i <= n - (k - path.size()) + 1; ++i) {   // 优化剪枝
            path.emplace_back(i);
                 traceBack(n, k, i + 1);         //  注意：这里是 i + 1            
path.pop_back();
        }
    }
    vector<vector<int>> combine(int n, int k) {
        traceBack(n, k, 1, ret, path);
        return ret;
    }
};


模板：
void backtracking(参数) {
    if (终止条件) {
        存放结果;
        return;
    }

    for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {
        处理节点;
        backtracking(路径，选择列表); // 递归
        回溯，撤销处理结果
    }
}
（1）回溯函数模板返回值以及参数
void backtracking(参数)

（2）回溯函数终止条件

回溯用了递归，递归要有终止条件。

什么时候达到了终止条件，树中就可以看出，一般来说搜到叶子节点了，也就找到了满足条件的一个答案，把这个答案存放起来，并结束本层递归。
	if (终止条件) {
    	存放结果;
    	return;
}

（3）回溯搜索的遍历过程
  for (选择：本层集合中元素（树中节点孩子的数量就是集合的大小）) {
    处理节点;
    backtracking(路径，选择列表); // 递归
    回溯，撤销处理结果
}

4.1	Leetcode 216
原有集合{1 - 9}
目标集合： k 个 && 和为 n
原有集合：元素不重复，有序
目标集合：元素不重复，k 个数的组合并且和为 n

5.1	Leetcode  39
原有集合：元素不重复，无序
目标集合：元素可以重复，和为 target 
有序无序是否有影响？
目标集合中的元素不可以重复时是怎么控制的？
目标集合中的元素可以重复怎么控制？
for (int i = start; i <= n - (k - path.size()) + 1; ++i) {   // 优化剪枝
        path.emplace_back(i);
             traceBack(n, k, i + 1);        //  这里是 i + 1 （用于控制元素不重复）        
path.pop_back();
}

Leetcode  40
原有集合：元素有重复，无序
目标集合：原有集合中的元素只能用一次，和为 target

重要点：
（1）	树形图
（2）	回溯模板（递归对应树形图树枝，for循环对应树形图的树层）
（3）	剪枝

